All instructions are a single byte.
Address space is 4096 bytes.

REGISTERS
A
X
Stack
StackPage
Flags
Pc

FLAGS
zocd ddxx
x - Context (0 = A, 1 = X, 2 = S, 3 = F)
d - Don't Cares (not used yet)
c - Carry
o - Overflow
z - Zero (Last result was zero)

INSTRUCTIONS
nop
	Does nothing.
iml
	Loads an immediate value into the lower part of C.
	???? iiii
	i - The immediate value.
imh
	Loads an immediate value into the upper part of C.
	???? iiii
	i - The immediate value.

Arithmetic
nand
	A = A NAND value.
	???? aaaa
	a - The address of value.
nor
	A = A NOR value.
	???? aaaa
	a - The address of value.
xnor
	A = A XNOR value.
	???? aaaa
	a - The address of value.
add
	A = A + value.
	???? aaaa
	a - The address of value.
sub
	Subtract from A.
	???? aaaa
	a - The address of value.
shl
	Shift A left once.
shr
	Shift A right once.
ina
	Increment A.
inx
	Increment X.
dea
	Decrement A.
dex
	Decrement X.

Context
Context instructions define the context for future instructions.
Anywhere where C is used as a register, C is replaced with the context register.
Temporarily -> for the next instruction.
ca
	Context is A.
cx
	Context is X.
cs
	Context is S.
cf
	Context is F.
cta
	Context is temporarily A.
ctx
	Context is temporarily X.
cts
	Context is temporarily S.
ctf
	Context is temporarily F.

Transfers
push
	Push C.
pop
	Pop C.
mac
	Move A to C.
mxc
	Move X to C.
msc
	Move Stack to C.
mpc
	Move StackPage to C.
mfc
	Move F to C.
mca
	Move C to A.
mcx
	Move C to X.
mcs
	Move C to Stack.
mcp
	Move C to StackPage.
mcf
	Move C to F.
sti
	Store C at immediate.
	???? iiii
ldi
	Load C from immediate.
	???? iiii
ste(xtended)
	Store C at address where immediate is upper 4 bits and X is lower 8.
	???? iiii
lde(xtended)
	Load C from address where immediate is upper 4 bits and X is lower 8.
	???? iiii

Branches
ze
	Zero Enabled. Zero = 1.
zo
	Zero if Overflow. Zero = Overflow.
zc
	Zero if Carry. Zero = Carry.
zn
	Zero not. Zero = NOT Zero.
bi
	Branch to offset defined by immediate if zero flag is 1.
	???? iiii
je
	Jump to an address defined by immediate and X if zero flag is 1.
	???? iiii
cal
	Push Pc and Flags, then jump to address where immediate is upper 4 bits and X is lower 8.
	???? iiii
ret
	Pop Flags and Pc.

MACRO INSTRUCTIONS
call <label>
	cx, imh, iml, ze, cal
	Sets context to X, loads X with the lower 8 bits of the label,
	sets Zero flag and then calls cal to push state and jump to the function.
jump <label>
	cx, imh, iml, ze, je
	Sets context to X, loads X with the lower 8 bits of the label,
	sets Zero flag and then calls be to branch to the function.
sh <direction(l|r) <count>
	shl, shl, shl... | shr, shr, shr...
	Generates count number of shift left or shift right instructions.
imm <register> <value>
	(ca | cx | cs | cf), imh, iml
	Sets context to register and then loads an immediate.